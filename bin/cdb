#!/usr/bin/env ruby

require 'cdb-crawlr'
# load 'lib/cdb-crawlr.rb'
require 'optparse'

$cli = CDB::CLI.new

def print_help(opt = @global, error=nil)
  puts(error.to_s+"\n\n") if error
  puts opt
  exit 1
end

@global = OptionParser.new do |opts|
  opts.banner = "Usage: cdb [-h|--help] [-v|--version] <COMMAND> <TYPE> [<ARGS>]"

  opts.on("-h", "--help", "Display this screen"){ print_help }
  opts.on("-v", "--version", "Show version information") do
    puts "cdb #{CDB::VERSION}"; exit
  end

  opts.separator "\nCOMMANDS:"
  opts.separator "    search      Search for entries of a given TYPE matching QUERY"
  opts.separator "    show        Show details of an entry using a CDB_ID obtained from search"
end

@search = OptionParser.new do |opts|
  opts.banner = "Search for entries of a given TYPE matching QUERY\n"+
                "Usage: cdb search [-h|--help] <TYPE> <QUERY>"

  opts.on("-h", "--help", "Display this screen"){ print_help opts }

  opts.separator "\nTYPES:"
  opts.separator "    issue       Search comic issue names for given QUERY"
  opts.separator "    series      Search comic series names for given QUERY"
end

@show = OptionParser.new do |opts|
  opts.banner = "Show details of an entry using a CDB_ID obtained from search\n"+
                "Usage: cdb show [-h|--help] <TYPE> <CDB_ID>"

  opts.on("-h", "--help", "Display this screen"){ print_help opts }

  opts.separator "\nTYPES:"
  opts.separator "    series      Get all available details of a comic series"
end

@command_opts = {
  'search' => @search,
  'show' => @show
}

# Parse global flags
begin
  @global.order!
rescue OptionParser::InvalidOption => e
  puts e; print_help
end

# Pop and verify command
begin
  command = ARGV.shift
  $cli[:command] = command
  command_opt = @command_opts[$cli[:command]]
rescue
  error = "invalid COMMAND: #{command}" unless command.to_s.empty?
  print_help @global, error
end

# Parse command flags
begin
  command_opt.order!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
  print_help command_opt, e
end

# Pop and verify type
begin
  type = ARGV.shift
  $cli[:type] = type
rescue
  error = "invalid TYPE: #{type}" unless type.to_s.empty?
  print_help command_opt, error
end

# Verify args
begin
  $cli[:args] = ARGV.join(' ')
rescue => e
  print_help command_opt, e
end

$cli.execute
