#!/usr/bin/env ruby

require 'cdb-crawlr'
# load 'lib/cdb-crawlr.rb'
require 'optparse'

$cli = CDB::CLI.new

def print_help(opt = @global, error=nil)
  puts error if error
  puts opt
  exit 1
end

@global = OptionParser.new do |opts|
  opts.banner = "Usage: cdb [-h|--help] [-v|--version] <command> [<args>]"
  opts.on("-h", "--help", "Display this screen"){ print_help }
  opts.on("-v", "--version", "Show version information") do
    puts "cdb #{CDB::VERSION}"; exit
  end
end

@search = OptionParser.new do |opts|
  opts.banner = "Usage: cdb search [-h|--help] <type> <query>"
  opts.on("-h", "--help", "Display this screen"){ print_help opts }
end

@command_opts = {
  'search' => @search,
  'show' => nil # stub
}

# Parse global flags
begin
  @global.order!
rescue OptionParser::InvalidOption => e
  puts e; print_help
end

# Pop and verify command
begin
  command = ARGV.shift
  $cli[:command] = command
  command_opt = @command_opts[$cli[:command]]
rescue
  error = "invalid_command: #{command}" unless command.to_s.empty?
  print_help @global, error
end

# Parse command flags
begin
  command_opt.order!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
  print_help command_opt, e
end

# Pop and verify type
begin
  type = ARGV.shift
  $cli[:type] = type
rescue
  error = "invalid type: #{type}" unless type.to_s.empty?
  print_help command_opt, error
end

# Verify args
begin
  $cli[:args] = ARGV.join(' ')
rescue => e
  print_help command_opt, e
end

$cli.execute
